; simple light test

constants [[ta0ctl $0160][ta0r $0170][ta0ccr0 $172]
           [p1dir $22][p1out $21][p2dir $2a][p2out $29]
           [adcae0 $4a][adcae1 $4b][adcctl0 $01b0][adcctl1 $1b2][adcmem $1b4]]

to onstart
; writeb p1dir $1c
; writeb p1out $1c
writeb p2dir $38
writeb p2out $00
write adcctl0 $10
write adcctl1 $f8
bset adcae0 1
bset adcctl0 2
cyan wait 1 magenta wait 1 blue wait 1 off
end

to ongo
loop [red wait 3 green mwait 301]
end

to test
prs "|hello\nworld|
end

to flash
repeat 10 [cyan mwait 50 magenta mwait 50 blue mwait 50]
off
end

to bit_rev :n
let [res 0]
repeat 16
 [make "res lsh :res 1
  make "res :res or (:n and 1) 
  make "n lsh :n -1]
output :res
end

to read-adc
bset adcctl0 1
waituntil [not (read adcctl1) and 1]
output read adcmem
end

; define redon [][bclr p1out $04]
; define redoff [][bset p1out $04]
; define greenon [][bclr p1out $08]
; define greenoff [][bset p1out $08]
; define blueon [][bclr p1out $10]
; define blueoff [][bset p1out $10]
; define alloff [][bset p1out $1c]

define redon [][bclr p2out $20]
define redoff [][bset p2out $20]
define greenon [][bclr p2out $10]
define greenoff [][bset p2out $10]
define blueon [][bclr p2out $08]
define blueoff [][bset p2out $08]
define alloff [][bset p2out $38]

define red[][redon blueoff greenoff]
define green[][redoff blueoff greenon]
define blue[][redoff blueon greenoff]
define cyan [][redoff greenon blueon]
define magenta [][redon greenoff blueon]
define yellow [][redon greenon blueoff]
define white [][redon greenon blueon]
define off [][redoff greenoff blueoff]
